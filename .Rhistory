1:20
pi:10
15:1
?':'
seq
seq(1:20)
seq(1,20)
seq(0, 10, by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2),each=10)
getwd
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
file.path(folder1,folder3)
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
setwd(old.dir)
unlink("testdir",recursive = TRUE)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char("My","name","is")
my_char <- ("my","name","is")
my_char <- c("My","name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,"Hari")
my_name
paste(my_name)
paste(my_name,collapse = " ")
paste("Hell","world!", sep = " ")
paste("Hello","world!", sep = " ")
paste(seq(1,3),c("X","Y","Z"),sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <-rnorm
y <-rnorm(1000)
z <-rep(NA,1000)
my_data <- sample(c(y, z), 100)
my_na   <- my_data(is.na())
my_name <- my_data(is.na())
my_na <- my_data(is.na())
my_na <- my_data(is.na())
my_na <- my_data(is.na())
library(httr)
?oauth_endpoints
oauth_endpoints("github")
myapp1 <- oauth_app("github", key = "b4a130c06359a14c939f", secret = "d44583040b6670d5a0ef9d96f73331abd0c916b5")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp1)
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp1)
?github_token
?oauth2.0_token
pollutantmean <- function(directory, pollutant, id = 1:332) {
flist <- list.files(directory,full.names = TRUE)
for (i in id) {
print(flist[i])
da <- rbind(data,read.csv(flist[i])
}
dc <- da[,pollutant]
dcn <- dc[!is.na(dc)]
mean(dcn)
}
solve()
solve
?solve
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
makeCacheMatrix <- function(x = matrix()) {
## Initialize
invm <- NULL
set <- function(y) {
x <<- y
invm <<- NULL
}
get <- function() x
setInverse <- function(inverse) invm <<- inverse
getInverse <- function() invm
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invm <- x$getInverse()
## Check if matrix inverse is available in cache
if(!is.null(invm)) {
message("getting cached data")
return(invm)
}
data <- x$get()
## Compute matrix inverse
invm <- solve(data, ...)
x$setInverse(invm)
invm
}
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
x <- rnorm(100)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
ndir <- "c:/zcoursera/work/rprogram/wk4"
library("swirl")
swirl()
mdf <- read.csv(path2csv,stringsAsFactors = FALSE)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("d[lyr")
packageversion("dplyr")
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
sele select(-(x:size))
select(-(x:size))
select(x:size)
select(X:size)
cran
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country =="US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package)
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum,count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum,unique > 465)
view(top_unique)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
gather(students2,sex_class,count,-grade)
res <- gather(students2,sex_class,count,-grade)
print res
Print res
print(res)
?separate
separate(data=res,col=sex_class,into=c("sex,"class))
separate(data=res,col=sex_class,into=c("sex,"class"))
separate(res,sex_class,c("sex,"class"))
?separate
separate(res,"sex_class",c("sex,"class"))
separate()
separate(res)
separate(res,sex_class)
separate(res,sex_class,c("sex","class"))
submit()
print(students3)
submit()
?spread
submit()
submit()
submit()
reset()
swirl()
reset()
swirl()
submit()
submit()
submit()
submit()
library(readr)
parse_numeric("class5")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students3
?parse_number
parse_number(students3)
parse_number(students3$class1)
submit()
swirl()
reset()
submit()
swril
swirl()
submit()
submit()
submit()
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,sex_class,count)
res <- gather(students2,sex_class,count,-grade)
print(res)
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
submit()
?spread
submit()
library(readr)
parse_numeric("class5")
submit()
submit()
parse_numeric("class5")
parse_numeric("class4")
parse_number("class4")
submit()
submit()
parse_number("class4")
submit()
submit()
submit()
submit()
students3
students4
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed,status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed,failed)
sat
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label = TRUE)
now
now()
this_moment <- now()
now
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
time(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
?now
nyc <- now("America/New_York")
nyc
depart <- nyc + day(2)
depart <- nyc + days(2)
depart
depart <- update(depart,hours=17,minutes=34)
depart
arriver <- depart +hrs(15)+minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive,"Asia/Hong_kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive <-  with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz="singapore")
mdy("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time)
how_long <- interval(last_time,arrive)
as.period(how_long)
stopwatch()
library(ggplot2)
library(swirl)
swirl()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
librrairquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Mo
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
library(ggplot2movies)
library(ggplot2)
qplot(votes, rating, data = movies)
pwd
wd
getwd()
mean_num_steps
mean_num_steps <- format(mean(stps_per_day$steps, na.rm = TRUE), big.mark=",",scientific=F)
mean_num_steps_nm <- format(mean(stps_per_day_nm$steps), big.mark=",",scientific=F)
datafname = "activity.csv"
zipfname = "repdata data activity.zip"  # this file should be placed in the working directory
if (!file.exists(datafname)){
unzip(zipfname)
}
# load required libraries
library(lattice)
library(knitr)
setwd('P:\Projects\RepData_PeerAssessment1')
setwd('P:/Projects/RepData_PeerAssessment1')
datafname = "activity.csv"
zipfname = "repdata data activity.zip"  # this file should be placed in the working directory
if (!file.exists(datafname)){
unzip(zipfname)
}
# load required libraries
library(lattice)
library(knitr)
actdata<-read.csv("activity.csv", header=TRUE, colClasses=c("numeric","Date","numeric"))
head(actdata)
summary(actdata)
mindt <- min(actdata$date)
maxdt <- max(actdata$date
)
mindt <- min(actdata$date)
maxdt <- max(actdata$date)
durindays <- as.numeric(maxdt - mindt) + 1
cmpl_actdata<-actdata[complete.cases(actdata),]
count_cmpl_cases<-nrow(cmpl_actdata)
incmpl_actdata<-actdata[!complete.cases(actdata),] ## data with only missing rows
count_incmpl_cases<-nrow(incmpl_actdata)
stps_per_day <- as.data.frame(tapply(cmpl_actdata$steps, INDEX = cmpl_actdata$date, FUN = "sum", na.rm = TRUE))
colnames(stps_per_day) <-  "steps"
max_num_steps<-max(stps_per_day)+5000
hist(stps_per_day$steps, main = "Total Number of Steps Per Day",
xlab = "Total Number of Steps Per Day", ylab = "Frequency",
breaks = 10, xlim = c(0, max_num_steps), ylim = c(0, 20), col = "green")
mean_num_steps <- format(mean(stps_per_day$steps, na.rm = TRUE), big.mark=",",scientific=F)
median_num_steps <- format(median(stps_per_day$steps, na.rm = TRUE),big.mark=",",scientific=F)
mean_num_steps
median_num_steps
H
